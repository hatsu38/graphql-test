# Nginxの実行ユーザー
user nginx;
# 実行プロセス数
# CPUのコア数より多く設定してもパフォーマンスは上がらない
# autoの場合には、CPUコア数になる
worker_processes auto;

# エラーログの吐き出し場所と、ログレベルを指定
error_log /dev/stderr info;

# NginxのプロセスIDが保存されるファイル
pid /var/log/nginx.pid;


events {
  # コネクション数
  worker_connections 1024;
}

http {
  # /etc/nginx/mime.typesにnginxが用意したMIMEタイプと拡張子のマッピングがあるので、それを読み込む
  include       /etc/nginx/mime.types;
  # /etc/nginx/mime.typesから決定できなかったMIMEタイプの場合に、設定するMIMEタイプを指定
  default_type  application/octet-stream;
  charset utf-8;
  log_format json escape=json '{"time": "$time_iso8601",'
        '"remote_addr": "$remote_addr",'
        '"host": "$host",'
        '"http_host": "$http_host",'
        '"proxy_add_x_forwarded_for": "$proxy_add_x_forwarded_for",'
        '"scheme": "$scheme",'
        '"remote_user": "$remote_user",'
        '"status": "$status",'
        '"server_protocol": "$server_protocol",'
        '"request_method": "$request_method",'
        '"request_uri": "$request_uri",'
        '"request": "$request",'
        '"body_bytes_sent": "$body_bytes_sent",'
        '"bytes_sent": "$bytes_sent",'
        '"request_time": "$request_time",'
        '"upstream_response_time": "$upstream_response_time",'
        '"upstream_connect_time": "$upstream_connect_time",'
        '"upstream_addr": "$upstream_addr",'
        '"http_user_agent": "$http_user_agent",'
        '"http_referer": "$http_referer"}';

  access_log  /dev/stdout  json;

  # Nginxのバージョン情報を公開しない設定
  server_tokens off;
  # コンテンツのファイルの読み込みとクライアントへのレスポンスの送信にsendfile() APIを使うかを設定します
  # sendfile()を使うとカーネル空間内でファイルの読み込みと送信が完了するため、効率良くファイルの内容をクライアントに送信できます。
  # デフォルトの設定値はoffです。
  sendfile       on;
  tcp_nopush     on;
  aio            on;
  # キープアライブのタイムアウトの秒数。デフォルトで75s
  # キープアライブは、ネットワーク上で接続が有効であることを確認したり、無通信により切断されるのを防ぐために定期的に短い通信を行うこと
  keepalive_timeout  65;

  # /etc/nginx/conf.dディレクトリにある拡張子がconfのファイルを読み込む
  # conf.dディレクトリにはバーチャルサーバ毎の設定ファイルを置く
  include /etc/nginx/conf.d/*.conf;

  # gzip 圧縮設定
  gzip on;
  # 圧縮対象MIMEタイプ
  # 画像はすでに圧縮されているのであまり意味ない
  gzip_types  text/plain
              text/css
              text/csv
              text/xml
              text/svg+xml
              text/javascript
              application/javascript
              application/json
              application/pdf;
  # 圧縮するレスポンスの最小長を指定するには、gzip_min_lengthディレクティブを使用します。
  # デフォルトは20バイトです（ここでは1000に調整されています）。
  gzip_min_length 1000;
  # プロキシされたリクエストの応答のgzip化を有効または無効にします
  # デフォルトは無効だが、以下の場合にgzipをonにする設定
  gzip_proxied  no-cache  no-store  private  expired  auth;
  # gzipサポートがないクライアントのgzip圧縮された応答の解凍を有効にします
  gunzip on;

  upstream app {
    # server 0.0.0.0:3000 max_fails=3 fail_timeout=30s;
    server unix:///app/tmp/sockets/puma.sock;
  }

  server {
    listen 8000 default_server;
    # 開発環境は80番ポートのみ仕様
    # listen 443 default_server;
    # error_page 404             /404.html;
    # error_page 505 502 503 504 /500.html;

    # server_name fargate-test.hatsu38.com;
    server_name localhost;

    root /app/public;
    # クライアントから送信されるリクエストボディの最大許可量を設定
    # デフォルトでは、1MB
    client_max_body_size 100m;

    # .で始まるpathへのアクセスは許可しない。403にする
    location ~ /\. {
      deny all;
    }

    # .で始まるが、.well-knownで始まるパスへのアクセスを許可する
    location ~ /\.well-known {
      allow all;
    }

    location / {
      expires -1;
      try_files $uri @rails;
    }

    location @rails {
      proxy_set_header X-Real-IP $remote_addr;
      # NOTE: 開発環境はhttpなのでコメントアウト
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host  $host;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://app;
    }
  }
}